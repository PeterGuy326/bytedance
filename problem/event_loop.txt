Timers: 定时器 Interval Timoout 回调事件，将依次执行定时器回调函数
Pending: 一些系统级回调将会在此阶段执行
Idle,prepare: 此阶段"仅供内部使用"
Poll: IO回调函数，这个阶段较为重要也复杂些，
Check: 执行 setImmediate() 的回调
Close: 执行 socket 的 close 事件回调

单线程的一个缺点是不能充分利用多核，所以官方推出了 cluster 模块， cluster 模块可以创建共享服务器端口的子进程

这些术语描述的是Node.js中的事件循环的不同阶段。Node.js使用单线程和事件循环来处理高并发的I/O操作，而不需要多线程。下面是这些阶段的详细解释：

Timers (定时器): 这个阶段处理所有的由 setTimeout 和 setInterval 设置的回调函数。这些回调函数按照它们被设置的时间顺序执行。如果一个回调函数的执行时间超过了它所设置的间隔时间，它将会延迟到下一个时间循环迭代中执行。

Immediate (立即执行的回调): 这个阶段处理所有的由 setImmediate 设置的回调函数。与定时器不同，setImmediate 会在当前事件循环迭代结束后立即执行回调，而不是等待下一个迭代。

I/O Callbacks (I/O 回调): 这个阶段处理所有的I/O回调，包括网络请求、文件系统操作等。这些回调通常是由操作系统的I/O事件触发的。

Close Callbacks (关闭回调): 这个阶段执行所有与关闭操作相关的回调，比如TCP连接的关闭事件。这是为了确保资源能够被正确释放。

Pending Callbacks (待处理回调): 这个阶段执行那些在之前的事件循环迭代中被推迟的回调。这可能包括一些异步操作的完成回调，或者是在事件循环的其他阶段中无法处理的回调。

Poll (轮询): 这个阶段是事件循环中非常重要的部分，它负责处理所有的I/O事件，如网络请求、文件读写等。在这个阶段，Node.js会检查所有的I/O事件，如果有任何事件发生，相应的回调就会被推入事件队列中，等待在Timers阶段被执行。

Check (检查): 这个阶段是Node.js 0.11.13版本引入的，用于处理由 setImmediate 设置的回调。在Node.js 0.11.15版本之后，setImmediate 被引入到主线程中，因此这个阶段不再单独存在。

Idle, Prepare (空闲, 准备): 这两个阶段是Node.js内部使用的，通常不会直接涉及到开发者的代码。它们用于在事件循环的空闲时间执行一些内部的清理工作。

这些阶段共同构成了Node.js的事件循环，它们确保了异步事件能够被有效地处理，同时避免了长时间运行的同步代码阻塞事件循环。通过这种方式，Node.js能够同时处理大量的并发连接，而不需要复杂的多线程编程。